{"version":3,"sources":["components/Weatherimg/img_london.jpg","components/FutureForcast.jsx","components/CurrentWeather.jsx","components/Weather.jsx","components/WeatherApiCall.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","FutureWeather","props","day1","icon1","minTemp1","maxTemp1","day2","icon2","minTemp2","maxTemp2","day3","icon3","minTemp3","maxTemp3","react_default","a","createElement","react_draggable_default","className","dist_default","format","moment","unix","utc","src","alt","style","width","CurrentWeather","city","currentTemp","time","london","Weather","forecast","map","cast","idx","key","components_CurrentWeather","location","name","current","temp_f","localtime","FutureForcast","forecastday","date_epoch","day","condition","icon","mintemp_f","maxtemp_f","api_key","state","componentDidMount","_callee","response","data","regenerator_default","wrap","_context","prev","next","fetch","concat","sent","json","_this","setState","console","log","stop","components_Weather","this","Component","App","WeatherApiCall","React","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18d41b71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img_london.e913c72e.jpg\";","import React from \"react\";\nimport Moment from \"react-moment\";\nimport moment from \"moment\";\nimport Draggable from \"react-draggable\";\n\nconst FutureWeather = props => {\n  const {\n    day1,\n    icon1,\n    minTemp1,\n    maxTemp1,\n    day2,\n    icon2,\n    minTemp2,\n    maxTemp2,\n    day3,\n    icon3,\n    minTemp3,\n    maxTemp3\n  } = props;\n  return (\n    <Draggable>\n      <div className=\"w3-row\">\n        <div className=\"w3-third w3-center\">\n          <h3>\n            <Moment format=\"ddd\">{moment.unix(day1).utc()}</Moment>\n          </h3>\n\n          <img src={icon1} alt=\"sun\" style={{ width: 80 + \"px\" }} />\n          <p>\n            {\" \"}\n            L: {minTemp1}\n            <sup>0</sup>\n          </p>\n          <p>\n            {\" \"}\n            H: {maxTemp1}\n            <sup>0</sup>\n          </p>\n        </div>\n        <div className=\"w3-third w3-center\">\n          <h3>\n            <Moment format=\"ddd\">{moment.unix(day2).utc()}</Moment>\n          </h3>\n          <img src={icon2} alt=\"cloud\" style={{ width: 80 + \"px\" }} />\n          <p>\n            {\" \"}\n            L: {minTemp2}\n            <sup>0</sup>\n          </p>\n          <p>\n            {\" \"}\n            H: {maxTemp2}\n            <sup>0</sup>\n          </p>\n        </div>\n        <div className=\"w3-third w3-center w3-margin-bottom\">\n          <h3>\n            <Moment format=\"ddd\">{moment.unix(day3).utc()}</Moment>\n          </h3>\n          <img src={icon3} alt=\"clouds\" style={{ width: 80 + \"px\" }} />\n          <p>\n            {\" \"}\n            L: {minTemp3}\n            <sup>0</sup>\n          </p>\n          <p>\n            {\" \"}\n            H: {maxTemp3}\n            <sup>0</sup>\n          </p>\n        </div>\n      </div>\n    </Draggable>\n  );\n};\n\nexport default FutureWeather;\n","import React from \"react\";\nimport london from \"./Weatherimg/img_london.jpg\";\n\nconst CurrentWeather = props => {\n  const { city, currentTemp, time } = props;\n  return (\n    <div className=\"w3-display-container w3-text-white\">\n      <img src={london} alt=\"Lights\" style={{ width: 100 + \"%\" }} />\n\n      <div className=\"w3-xlarge w3-display-bottomleft w3-padding\">\n        {city} {currentTemp}\n        <sup>0</sup>\n        <p>{time}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default CurrentWeather;\n","import React from \"react\";\n\nimport \"../style/Weather.css\";\nimport FutureWeather from \"./FutureForcast\";\nimport CurrentWeather from \"./CurrentWeather\";\n\nconst Weather = props => {\n  return props.forecast.map((cast, idx) => {\n    return (\n      <div\n        className=\"w3-card-4 w3-margin \"\n        style={{ width: 50 + \"%\" }}\n        key={idx}\n      >\n        <CurrentWeather\n          city={cast.location.name}\n          currentTemp={cast.current.temp_f}\n          time={cast.location.localtime}\n        />\n\n        <FutureWeather\n          day1={cast.forecast.forecastday[1].date_epoch}\n          icon1={cast.forecast.forecastday[1].day.condition.icon}\n          minTemp1={cast.forecast.forecastday[1].day.mintemp_f}\n          maxTemp1={cast.forecast.forecastday[1].day.maxtemp_f}\n          day2={cast.forecast.forecastday[2].date_epoch}\n          icon2={cast.forecast.forecastday[2].day.condition.icon}\n          minTemp2={cast.forecast.forecastday[2].day.mintemp_f}\n          maxTemp2={cast.forecast.forecastday[2].day.maxtemp_f}\n          day3={cast.forecast.forecastday[3].date_epoch}\n          icon3={cast.forecast.forecastday[3].day.condition.icon}\n          minTemp3={cast.forecast.forecastday[3].day.mintemp_f}\n          maxTemp3={cast.forecast.forecastday[3].day.maxtemp_f}\n        />\n      </div>\n    );\n  });\n};\n\nexport default Weather;\n","import React, { Component } from \"react\";\n\nimport WeatherDisplay from \"./Weather\";\n\nconst api_key = \"b163c4576f5b4c54b53192208192803\";\n\nclass Weather extends Component {\n  state = {\n    forecast: []\n  };\n  componentDidMount = async () => {\n    const response = await fetch(\n      `https://cors-anywhere.herokuapp.com/https://api.apixu.com/v1/forecast.json?&days=4&key=${api_key}&q=auto:ip`\n    );\n    const data = await response.json();\n\n    this.setState({\n      forecast: [data]\n    });\n    console.log(this.state.forecast);\n  };\n\n  render() {\n    return <WeatherDisplay forecast={this.state.forecast} />;\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\nimport Weather from \"./components/WeatherApiCall\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Weather />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}